alias sz='source ~/.zshrc'

# bindkey -v

#bindkey '^P' up-history
#bindkey '^N' down-history
#bindkey '^?' backward-delete-char
#bindkey '^h' backward-delete-char
#bindkey '^w' backward-kill-word
#bindkey '^r' history-incremental-search-backward

#Customized git status, oh-my-zsh currently does not allow render dirty status before branch
#git_custom_status() {
#  local cb=$(current_branch)
#  if [ -n "$cb" ]; then
#    echo "$(parse_git_dirty)$ZSH_THEME_GIT_PROMPT_PREFIX$(current_branch)$ZSH_THEME_GIT_PROMPT_SUFFIX"
#  fi
#}
#
#function zle-line-init zle-keymap-select {
#    VIM_PROMPT="%{$fg_bold[yellow]%} [% NORMAL]%  %{$reset_color%}"
#    RPS1="${${KEYMAP/vicmd/$VIM_PROMPT}/(main|viins)/}$(git_custom_status) $EPS1"
#    zle reset-prompt
#}
#
#zle -N zle-line-init
#zle -N zle-keymap-select
#export KEYTIMEOUT=1
#

# if the command-not-found package is installed, use it
if [ -x /usr/lib/command-not-found -o -x /usr/share/command-not-found/command-not-found ]; then
	function command_not_found_handler {
	        # check because c-n-f could've been removed in the meantime
                if [ -x /usr/lib/command-not-found ]; then
		   /usr/lib/command-not-found -- "$1"
                   return $?
                elif [ -x /usr/share/command-not-found/command-not-found ]; then
		   /usr/share/command-not-found/command-not-found -- "$1"
                   return $?
		else
		   printf "%s: command not found\n" "$1" >&2
		   return 127
		fi
	}
fi

function pcd { cd ${PWD%/$1/*}/$1; }

function vimDirDiff { echo "Please wait while vim diffs the directories" args=$@ vim -f "+execute \"DirDiff $args\"" echo "vimDirDiff Done" }

function _cdx {
	dest=$1
	if [ "$2" != "" ]; then
		dest="$dest/$2"
	fi
	cd "$dest"
}

function cdd { 
	_cdx ~/dotfiles $1
}

function cdo { 
	_cdx ~/o $1
}

function cdp { 
	_cdx ~/d/atm-php-docker/atm-php $1
}

# zsh-sticky-prefix

#local zle_sticked=""
#
#zle-line-init() {
#    BUFFER="$zle_sticked$BUFFER"
#    zle end-of-line
#}
#zle -N zle-line-init
#
#function zle-set-sticky {
#    zle_sticked="$BUFFER"
#    zle -M "Sticky: '$zle_sticked'."
#}
#zle -N zle-set-sticky
#bindkey '^S' zle-set-sticky
#
#function zle-unset-sticky {
#    zle_sticked=""
#    zle backward-kill-line 
#    #echo -n "\nRemoved sticky."
#}
#zle -N zle-unset-sticky
#bindkey '^A' zle-unset-sticky
#
#function accept-line {
#    if [[ -z "$BUFFER" ]] && [[ -n "$zle_sticked" ]]; then
#        zle_sticked=""
#        echo -n "\nRemoved sticky."
#    fi
#    zle .accept-line
#}
#zle -N accept-line
